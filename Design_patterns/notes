
1.Creational Design Pattern

Factory Pattern
Abstract Factory Pattern
Singleton Pattern
Prototype Pattern
Builder Pattern.

2. Structural Design Pattern

Adapter Pattern
Bridge Pattern
Composite Pattern
Decorator Pattern
Facade Pattern
Flyweight Pattern
Proxy Pattern

3. Behavioral Design Pattern

Chain Of Responsibility Pattern
Command Pattern
Interpreter Pattern
Iterator Pattern
Mediator Pattern
Memento Pattern
Observer Pattern
State Pattern
Strategy Pattern
Template Pattern
Visitor Pattern


Facade pattern -> all subclasses in a runner, Polymorphism using runner class

    public static void main(String[] args) {
        ShapeMaker shapeMaker = new ShapeMaker(); 
        // ShapeMaker class instantiates all subclasses and calls methods on specific subclass
        // i.e. drawCircle on circle class

        shapeMaker.drawCircle();
        shapeMaker.drawRectangle();
        shapeMaker.drawSquare();		
   }

Factory -> class creation on the basis of argument, single method
Facade -> interface, specific methods of classes called; like drawCircle(), drawSquare
Strategy pattern -> interface polymorphism, single method, like method overriding

IMP : 
factory(class, single method) + facade(interface, specific) = Strategy (class, interface, single method)

Strategy is like method overriding, same method but called on different classes
I will call a single method doOperation and pass parameters of class Add, Subtract and Multiplication.

Suppose i have to implement various payment gateways like phonepe, amazonpay, googlepay etc
i will use Facade pattern, a payment class that will call respective apis

but i will also implement Strategy pattern where for diff modes of payment
i will make specific methods for card or upi or netbanking payments.


If i use facade only then i will call payWithHDFCCard and pass HDFC and othe parameters
but with Strategy, i will call only payWithCard and pass HDFC and pass params.
No specific method for each bank.
