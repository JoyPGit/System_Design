
1.Creational Design Pattern

Factory Pattern
Abstract Factory Pattern
Singleton Pattern
Prototype Pattern
Builder Pattern.

2. Structural Design Pattern

Adapter Pattern
Bridge Pattern
Composite Pattern
Decorator Pattern
Facade Pattern
Flyweight Pattern
Proxy Pattern

3. Behavioral Design Pattern

Chain Of Responsibility Pattern
Command Pattern
Interpreter Pattern
Iterator Pattern
Mediator Pattern
Memento Pattern
Observer Pattern
State Pattern
Strategy Pattern
Template Pattern
Visitor Pattern


Facade pattern -> all subclasses in a runner, Polymorphism using runner class

    public static void main(String[] args) {
        ShapeMaker shapeMaker = new ShapeMaker(); 
        // ShapeMaker class instantiates all subclasses and calls methods on specific subclass
        // i.e. drawCircle on circle class

        shapeMaker.drawCircle();
        shapeMaker.drawRectangle();
        shapeMaker.drawSquare();		
   }


Facade -> facade class all methods and subclass instances
Strategy pattern -> methods

Suppose i have to implement various payment gateways like phonepe, amazonpay, googlepay phonepe etc
i will use Facade pattern, a payemnt class that will call respective apis

but i will also implement Strategy pattern where for diff modes of payment
i will make specific methods for card or upi or netbanking payments.